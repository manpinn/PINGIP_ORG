@{
    ViewData["Title"] = "Check Ports on IP-Adresses - Online-Tool";
}

<h1 class="display-4 text-center border-bottom">Check Ports on IP-Addresses - Online Tool</h1>
<br />
<p>Check, if Ports are open, on a specific IP-Address with the Online-Tool on this Website.</p>

<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon1">IPV4 / IPV6-Address</span>
    </div>
    <input id="input-ip" type="text" class="form-control" placeholder="Type in the IP-Address here" aria-label="IPV4/IPV6-Address" aria-describedby="basic-addon1">
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon1">Port</span>
    </div>
    <input id="input-port" type="text" class="form-control" placeholder="Type in the Port here" aria-label="Port" aria-describedby="basic-addon1">
</div>

<div class="d-grid gap-2 d-md-flex">
    <button id="btn-ping" class="btn btn-primary" type="button" style="width: 166px;">Connect</button>
</div>

<div class="ml-spinner" style="display: none; align-items: center; margin-top:20px;">
    <div class="spinner-grow text-secondary" role="status"></div>
    <div style="margin-left: 10px;">Connecting ...</div>
</div>
<br />
<div id="ml-alert" class="alert alert-danger d-flex align-items-center d-none" role="alert">
</div>



<div id="cmd-window" class="cmd-window">
    <div class="cmd-header">
        <span class="cmd-title">PORT CHECK RESULTS:</span>
        <button class="cmd-copy" onclick="copyToClipboard()">Copy</button>
    </div>
    <div>
        <span id="cmd-span"></span><br>
        <span class="cmd-cursor"></span>
    </div>
</div>
<br />
<div>
    <h2>Description</h2>
    <p>
        The online tool allows you to check if specific ports on a given IP address are open or closed. This is useful for troubleshooting network issues, ensuring services are running, or verifying firewall configurations.
    </p>
    <p>
        The online tool establishes a server-sided TCP connection between our server and the specified IP address and port. If the connection is successful, it indicates that the port is open and accepting connections. If the connection fails, it can be suggested that the port is closed or filtered by a firewall.
    </p>
    <p>
        <strong>Our Server's current IP-Address is 212.227.72.245</strong>
    </p>
    <p>
        The Server is located in Germany.
    </p>

    <h2>Other Tools</h2>
    <div class="list-group" style="">
        @Html.ActionLink(" Ping IP - Ping a specific IP-Address", "Index", "Home", null, new { @class = "list-group-item list-group-item-action bi-play list-group-item-primary" })
        @Html.ActionLink(" Trace Route - Trace Route on a specific IP-Address", "Index", "TraceRoute", null, new { @class = "list-group-item list-group-item-action bi-play list-group-item-primary" })
    </div>
    <br />

    <h2>🔐 Understanding TCP and UDP Ports</h2>
    <p>
        In computer networking, <strong>ports</strong> are communication endpoints used by devices to send and receive data. They help direct traffic to the correct service or application running on a device. There are two main types of transport protocols that use ports:
    </p>

    <h3>🔗 TCP (Transmission Control Protocol)</h3>
    <ul>
        <li><strong>Connection-Oriented:</strong> TCP requires a connection to be established before data is exchanged.</li>
        <li><strong>Reliable:</strong> It ensures all data packets are delivered in the correct order and checks for errors.</li>
        <li><strong>Use Cases:</strong> Commonly used for web browsing (HTTP/HTTPS), email (SMTP), and file transfers (FTP).</li>
    </ul>
    <p>
        When checking if a TCP port is open, the client attempts to establish a connection using the <code>TCP handshake</code>. If the connection is successful, we can confidently say that the port is open and accepting connections.
    </p>

    <h3>📡 UDP (User Datagram Protocol)</h3>
    <ul>
        <li><strong>Connectionless:</strong> UDP does not establish a connection before sending data.</li>
        <li><strong>Unreliable:</strong> There’s no guarantee that packets will arrive or be in order.</li>
        <li><strong>Use Cases:</strong> Used for fast, real-time applications like DNS queries, video streaming, VoIP, and gaming.</li>
    </ul>
    <p>
        Since UDP does not use a connection handshake, there's <strong>no built-in mechanism</strong> to confirm if a port is open. If the server responds to a UDP packet, the port is likely open — but if there’s no response, we can’t be sure whether the port is closed or the response was simply dropped or ignored.
    </p>

    <h3>❓ Why Can Only TCP Ports Be Confirmed Open?</h3>
    <ul>
        <li>✅ <strong>TCP:</strong> A successful handshake (connect) means the port is open.</li>
        <li>❌ <strong>UDP:</strong> No handshake. Lack of response may mean the port is closed, filtered, or just not responding — so there's <strong>no reliable way to confirm</strong>.</li>
    </ul>
    <p>
        As a result, **TCP port scanning** is more accurate for detecting open services, while **UDP scanning** can produce uncertain or false-negative results.
    </p>

    <h4>📌 Summary</h4>
    <table style="border-collapse: collapse; width: 100%;">
        <tr>
            <th style="border: 1px solid #ccc; padding: 6px;">Protocol</th>
            <th style="border: 1px solid #ccc; padding: 6px;">Connection Type</th>
            <th style="border: 1px solid #ccc; padding: 6px;">Reliable?</th>
            <th style="border: 1px solid #ccc; padding: 6px;">Can Confirm Open?</th>
        </tr>
        <tr>
            <td style="border: 1px solid #ccc; padding: 6px;">TCP</td>
            <td style="border: 1px solid #ccc; padding: 6px;">Connection-Oriented</td>
            <td style="border: 1px solid #ccc; padding: 6px;">Yes</td>
            <td style="border: 1px solid #ccc; padding: 6px;">✅ Yes</td>
        </tr>
        <tr>
            <td style="border: 1px solid #ccc; padding: 6px;">UDP</td>
            <td style="border: 1px solid #ccc; padding: 6px;">Connectionless</td>
            <td style="border: 1px solid #ccc; padding: 6px;">No</td>
            <td style="border: 1px solid #ccc; padding: 6px;">⚠️ Not reliably</td>
        </tr>
    </table>
</div>


<script type="text/javascript">

        var buttonPing = document.getElementById('btn-ping');

        function ping() {
            //alert('Hello, World!');

            document.getElementById('cmd-span').innerHTML = '';

            document.getElementById('ml-alert').classList.add('d-none');

            document.querySelector('.ml-spinner').style.display = 'flex';

            let retVal = getValues();

            if (retVal == -1 || retVal == -2) {
                document.querySelector('.ml-spinner').style.display = 'none';

                const alert = document.getElementById('ml-alert');

                alert.classList.remove('d-none');

                switch (retVal) {
                    case -1:
                        alert.innerHTML = 'INSERT A VALID IPV4/IPV6-ADDRESS';
                        break;
                    case -2:
                        alert.innerHTML = 'INSERT A VALID PORT (1-65535)';
                        break;
                }

                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });

                return;
            }

            let url = '/Home/AJAX/PortCheck';
            let data = retVal;
            let serverData = {};

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.text())
                .then(text => {
                    serverData = text;
                    console.log(serverData);

                    document.getElementById('cmd-span').innerHTML = text;

                    document.querySelector('.ml-spinner').style.display = 'none';
                })
                .catch((error) => {

                    document.querySelector('.ml-spinner').style.display = 'none';

                    const alert = document.getElementById('ml-alert');

                    alert.innerHTML = 'SERVER-ERROR';

                    alert.classList.add('d-none');

                    window.scrollTo({
                        top: 0,
                        behavior: 'smooth'
                    });

                    console.error('Error:', error);
                });


        }

        function isValidIPv4(ip) {
            const regex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
            return regex.test(ip);
        }

        function isValidIPv6(ip) {
            const regex = /([0-9a-fA-F]{1,4}:){7}([0-9a-fA-F]{1,4})|::|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:([0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}:){1,5}:([0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}:([0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}:([0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}:([0-9a-fA-F]{1,4}){1,5}|([0-9a-fA-F]{1,4}:){1,1}:([0-9a-fA-F]{1,4}){1,6}$/i;
            return regex.test(ip);
        }

        function isValidPort(port) {
            const num = Number(port);
            return Number.isInteger(num) && num >= 1 && num <= 65535;
        }


        function getValues() {

            const inputIp = document.getElementById('input-ip');

            const inputPort = document.getElementById('input-port');

            const isValidIPv4State = isValidIPv4(inputIp.value);

            const isValidIPv6State = isValidIPv6(inputIp.value);

            const isValidPortState = isValidPort(inputPort.value);

            if((isValidIPv4State|| isValidIPv6State) && isValidPortState)
            {
                var ipType = 0;

                if(isValidIPv4State == true)
                {
                    ipType = 1;
                }
                else if(isValidIPv6State == true)
                {
                    ipType = 2;
                }

                return { IpAdress: inputIp.value, Port: Number(inputPort.value), IpType: ipType };
            }
            else if((isValidIPv4State || isValidIPv6State) == false)
            {
                return -1;
            }
            else if(isValidPortState == false)
            {
                return -2;
            }
        }

        buttonPing.addEventListener('click', ping);

        function copyToClipboard() {
        // Get the content from the cmd-span element
        const text = document.getElementById('cmd-span').innerText;

        // Create a temporary text area to copy the text
        const tempTextArea = document.createElement('textarea');
        tempTextArea.value = text;
        document.body.appendChild(tempTextArea);

        // Select the text in the text area
        tempTextArea.select();
        tempTextArea.setSelectionRange(0, 99999); // For mobile devices

        // Execute the copy command
        document.execCommand('copy');

        // Remove the temporary text area
        document.body.removeChild(tempTextArea);
    }

</script>


@* <div class="list-group" style="">
    @Html.ActionLink(" Modules", "Index", "Module", null, new { @class = "list-group-item list-group-item-action bi-play" })
    @Html.ActionLink(" About", "About", "Home", null, new { @class = "list-group-item list-group-item-action bi-play" })
</div> *@